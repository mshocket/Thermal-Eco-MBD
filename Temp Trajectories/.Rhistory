season.4 <- c(2,  7,	11,	17,	18,	26,	29,	31,	48,	51,	53,	54,	55,	56,	57,	62,	72,	75,	76,	92)
d <- summary(season.4)
d
a <- c(60, 80, 70, 90, 100, 60, 90, 80, 90, 100, 90)
mean(a)
sd(a)
Cann.Brisbane.MVE.20.trans <- c(70, 77, 75, 90)
mean(Cann.Brisbane.MVE.20.trans)
sd(Cann.Brisbane.MVE.20.trans)
mean(Cann.Mildura.MVE.20.trans)
Cann.Mildura.MVE.20.trans <- c(92, 87, 93, 93)
mean(Cann.Mildura.MVE.20.trans)
sd(Cann.Mildura.MVE.20.trans)
avg.dev.time.18 <- 4.25 + 5 + 5.50 + 11.25 + 4
avg.dev.time.24.5 <- 3 + 2.75 + 2.25 + 1.75 + 2
avg.dev.time.28.5 <- 2.75 + 2 + 2.25 + 1 + 1.25
avg.dev.time.35 <- 1 + 1.7 + 1.3 + 1 + 1
avg.dev.time.18
avg.dev.time.24.5
avg.dev.time.28.5
avg.dev.time.35
1/avg.dev.time.18
1/avg.dev.time.24.5
1/avg.dev.time.28.5
1/avg.dev.time.35
dev.time.df <- data.frame(temp = c(18, 24.5, 28.5, 35), dev.rate = c(dr.18, dr.24.5, dr.28.5, dr.35))
dr.18 <- 1/avg.dev.time.18
dr.24.5 <- 1/avg.dev.time.24.5
dr.28.5 <- 1/avg.dev.time.28.5
dr.35 <- 1/avg.dev.time.35
dev.time.df <- data.frame(temp = c(18, 24.5, 28.5, 35), dev.rate = c(dr.18, dr.24.5, dr.28.5, dr.35))
plot(dev.rate ~ temp, data = dev.time.df)
plot(dev.rate ~ temp, data = dev.time.df, xlim = c(14, 36), ylim = c(0, 0.2))
lm(dev.rate ~ temp, data = dev.time.df)
View(dev.time.df)
.05*200
avg.dev.time.15 <- 37
avg.dev.time.20 <- 16.82
avg.dev.time.25 <- 13.48
avg.dev.time.30 <- 9.25
avg.dev.time.35 <- 8.57
error.dev.time.15 <- .39
error.dev.time.20 <- .11
error.dev.time.25 <- .11
error.dev.time.30 <- .07
error.dev.time.35 <- .07
dr.15 <- 1/avg.dev.time.15
dr.20 <- 1/avg.dev.time.20
dr.25 <- 1/avg.dev.time.25
dr.30 <- 1/avg.dev.time.30
dr.35 <- 1/avg.dev.time.35
dr.e.15 <- 1/error.dev.time.15
dr.e.20 <- 1/error.dev.time.20
dr.e.25 <- 1/error.dev.time.25
dr.e.30 <- 1/error.dev.time.30
dr.e.35 <- 1/error.dev.time.35
avg.dev.time.18 <- 4.25 + 5 + 5.50 + 11.25 + 4
avg.dev.time.24.5 <- 3 + 2.75 + 2.25 + 1.75 + 2
avg.dev.time.28.5 <- 2.75 + 2 + 2.25 + 1 + 1.25
avg.dev.time.35 <- 1 + 1.7 + 1.3 + 1 + 1
67.56 + 18.42
/3
85.98/3
A.season.1 <- c(2, 3,	4, 8, 15, 16,	17,	20,	21,	22,	24,	27,	28,	29,	32,	33,	35,	36,	37,	38,	39)
A.season.2 <- c(1, 5,	6, 7, 9, 10,	11,	12,	13,	14,	18,	19,	23,	25,	26,	30,	31,	34,	40)
A.rank.list = list(A.season.1, A.season.2)
A.a <- summary(A.season.1)
A.b <- summary(A.season.2)
A.season.data <- data.frame(Season = c(1, 2))
A.season.data$Mean <- c(A.a[4], A.b[4])
A.season.data$Median <- c(A.a[3], A.b[3])
A.season.data$quart1 <- c(A.a[2], A.b[2])
A.season.data$quart3 <- c(A.a[5], A.b[5])
A.season.data$sd <- c(sd(season.1), sd(season.2))
A.season.data$sd <- c(sd(A.season.1), sd(A.season.2))
par(mfrow = c(1, 1), mar = c(5, 5, 2, 1), cex.lab = 1.25, las = 1)
A.season.cols = c("midnightblue", "skyblue3")
plot(Mean ~ Season, data = A.season.data, xlim = c(0.5, 2.5), ylim = c(0,35), xlab = "Season", ylab = "Ranking", xaxt = "n", col = "white", cex.lab = 1.25,
main = "Angel Episode Rankings by Season")
arrows(x0 = 1, y0 = A.a[2], x1 = 1, y1 = A.a[5], angle = 0, lwd = 2)
arrows(x0 = 2, y0 = A.b[2], x1 = 2, y1 = A.b[5], angle = 0, lwd = 2)
points(Median ~ Season, data = A.season.data, pch = 22, bg = "goldenrod1", cex = 1.6)
points(Mean ~ Season, data = A.season.data, pch = 21, bg = "darkred", cex = 1.2)
axis(side = 1, at = c(1, 2, 3, 4, 5))
legend(1.5, 35, pch = c(21, 22, NA), lty = c(0, 0, 1), legend = c("mean", "median", "1st-3rd Quartiles"), pt.cex = 1.25, pt.bg = c("darkred", "goldenrod1"), bty = "n", lwd = c(0, 0, 2))
plot(Mean ~ Season, data = A.season.data, xlim = c(0.5, 2.5), ylim = c(0,35), xlab = "Season", ylab = "Ranking", xaxt = "n", col = "white", cex.lab = 1.25,
main = "Angel Episode Rankings by Season")
arrows(x0 = 1, y0 = A.a[2], x1 = 1, y1 = A.a[5], angle = 0, lwd = 2)
arrows(x0 = 2, y0 = A.b[2], x1 = 2, y1 = A.b[5], angle = 0, lwd = 2)
points(Median ~ Season, data = A.season.data, pch = 22, bg = "goldenrod1", cex = 1.6)
points(Mean ~ Season, data = A.season.data, pch = 21, bg = "darkred", cex = 1.2)
axis(side = 1, at = c(1, 2, 3, 4, 5))
legend(1.5, 35, pch = c(21, 22, NA), lty = c(0, 0, 1), legend = c("mean", "median", "1st-3rd Quartiles"), pt.cex = 1.25, pt.bg = c("darkred", "goldenrod1"), bty = "n", lwd = c(0, 0, 2))
barplot(A.season.data$sd, col = season.cols, xlab = "Season", ylab = "Rank Standard Deviation", names.arg = c(1, 2), ylim = c(0,30))
A.season.cols = c("midnightblue", "skyblue3")
plot(Mean ~ Season, data = A.season.data, xlim = c(0.5, 2.5), ylim = c(0,35), xlab = "Season", ylab = "Ranking", xaxt = "n", col = "white", cex.lab = 1.25,
main = "Angel Episode Rankings by Season")
arrows(x0 = 1, y0 = A.a[2], x1 = 1, y1 = A.a[5], angle = 0, lwd = 2)
arrows(x0 = 2, y0 = A.b[2], x1 = 2, y1 = A.b[5], angle = 0, lwd = 2)
points(Median ~ Season, data = A.season.data, pch = 22, bg = "goldenrod1", cex = 1.6)
points(Mean ~ Season, data = A.season.data, pch = 21, bg = "darkred", cex = 1.2)
axis(side = 1, at = c(1, 2, 3, 4, 5))
legend(1.5, 35, pch = c(21, 22, NA), lty = c(0, 0, 1), legend = c("mean", "median", "1st-3rd Quartiles"), pt.cex = 1.25, pt.bg = c("darkred", "goldenrod1"), bty = "n", lwd = c(0, 0, 2))
barplot(A.season.data$sd, col = season.cols, xlab = "Season", ylab = "Rank Standard Deviation", names.arg = c(1, 2), ylim = c(0,30))
barplot(A.season.data$sd, col = A.season.cols, xlab = "Season", ylab = "Rank Standard Deviation", names.arg = c(1, 2), ylim = c(0,30))
barplot(A.season.data$sd, col = A.season.cols, xlab = "Season", ylab = "Rank Standard Deviation", names.arg = c(1, 2), ylim = c(0,13))
barplot(A.season.data$sd, col = A.season.cols, xlab = "Season", ylab = "Rank Standard Deviation", names.arg = c(1, 2), ylim = c(0,14))
s1.df <- data.frame(Season = rep(1, times = 21), Ranks = A.season.1)
s2.df <- data.frame(Season = rep(2, times = 19), Ranks = A.season.2)
angel.data.long <- rbind(s1.df, s2.df)
kruskal.test(Ranks ~ Season, data = angel.data.long)
wilcox.test(A.season.1, A.season.2)
A.season.data
34/40
18/40
Cann.Brisbane.MVE.20.trans <- c(70, 77, 75, 90)
Cann.Mildura.MVE.20.trans <- c(92, 87, 93, 93)
mean(Cann.Brisbane.MVE.20.trans)
sd(Cann.Brisbane.MVE.20.trans)
mean(Cann.Mildura.MVE.20.trans)
sd(Cann.Mildura.MVE.20.trans)
Cann.Brisbane.MVE.27.trans <- c(75, 84, 100)
Cann.Mildura.MVE.27.trans <- c(50, 52, 83, 87, 100)
avg.dev.time.18 <- 4.25 + 5 + 5.50 + 11.25 + 4
avg.dev.time.24.5 <- 3 + 2.75 + 2.25 + 1.75 + 2
avg.dev.time.28.5 <- 2.75 + 2 + 2.25 + 1 + 1.25
avg.dev.time.35 <- 1 + 1.7 + 1.3 + 1 + 1
Cann.Brisbane.MVE.27.trans <- c(75, 84, 100)
Cann.Mildura.MVE.27.trans <- c(50, 52, 83, 87, 100)
mean(Cann.Brisbane.MVE.27.trans)
sd(Cann.Brisbane.MVE.27.trans)
mean(Cann.Mildura.MVE.27.trans)
sd(Cann.Mildura.MVE.27.trans)
Cann.Brisbane.MVE.20.trans <- c(70, 77, 75, 90)
Cann.Mildura.MVE.20.trans <- c(92, 87, 93, 93)
mean(Cann.Brisbane.MVE.20.trans)
mean(Cann.Mildura.MVE.20.trans)
Cann.Brisbane.MVE.27.trans <- c(75, 84, 100)
Cann.Mildura.MVE.27.trans <- c(50, 52, 83, 87, 100)
mean(Cann.Brisbane.MVE.27.trans)
mean(Cann.Mildura.MVE.27.trans)
mean(20, 27, 27, 8, 5)
mean(10, 22, 12, 20, 10)
mean(10, 22, 12, 20, 10)
mean(12, 53, 14, 29)
means(20, 31, 8, 20)
mean(20, 31, 8, 20)
mean(20, 27, 27, 8, 5)
mean(10, 22, 12, 20, 10)
mean(12, 53, 14, 29)
mean(20, 31, 8, 20)
mean(20, 27, 27, 8, 5)
sum(10, 22, 12, 20, 10)
sum(12, 53, 14, 29)
sum(20, 31, 8, 20)
sum(20, 27, 27, 8, 5)
74/5
n.20.b <- c(10, 22, 12, 20, 10)
n.20.b <- c(10, 22, 12, 20, 10)
n.20.m <- c(12, 53, 14, 29)
n.27.b <- c(20, 31, 8, 20)
n.27.m <- c(20, 27, 27, 8, 5)
mean(n.20.b)
mean(n.20.m)
mean(n.27.b)
mean(n.27.m)
mean(c(32,35))
Cann.Brisbane.MVE.34.trans <- c(78, 100, 90)
mean(Cann.Brisbane.MVE.34.trans)
sd(Cann.Brisbane.MVE.20.trans)
sd(Cann.Mildura.MVE.20.trans)
sd(Cann.Brisbane.MVE.27.trans)
sd(Cann.Mildura.MVE.27.trans)
mean(Cann.Brisbane.MVE.34.trans)
sd(Cann.Brisbane.MVE.34.trans)
n.34.b <- c(9, 23, 20)
mean(n.34.b)
install.packages("rEDM")
install.packages("dplyr")
library("rEDM")
library("dplyr")
data(tentmap_del)
head(tentmap_del)
lib <- c(1, 100)
pred <- c(201, 500)
ts <- tentmap_del
simplex_output <- simplex(ts, lib, pred)
summary(simplex_output)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(ts, lib, pred, E = 2, tp = 1:10)
plot(simplex_output$tp, simplex_output$rho, type = "l", xlab = "Time to Prediction (tp)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(ts, lib, pred)
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(ts, lib, pred, E = 2, tp = 1:10)
plot(simplex_output$tp, simplex_output$rho, type = "l", xlab = "Time to Prediction (tp)",
ylab = "Forecast Skill (rho)")
smap_output <- s_map(ts, lib, pred, E = 2)
plot(smap_output$theta, smap_output$rho, type = "l", xlab = "Nonlinearity (theta)",
ylab = "Forecast Skill (rho)")
smap_output$theta
data(block_3sp)
head(block_3sp)
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(ts, lib, pred)
block_lnlp_output <- block_lnlp(block_3sp, lib = lib, pred = pred, columns = c(1, 2, 4), target_column = 1,
stats_only = FALSE, first_column_time = TRUE)
data(block_3sp)
head(block_3sp)
lib <- c(1, NROW(block_3sp))
pred <- c(1, NROW(block_3sp))
block_lnlp_output <- block_lnlp(block_3sp, lib = lib, pred = pred, columns = c(1, 2, 4), target_column = 1,
stats_only = FALSE, first_column_time = TRUE)
observed <- block_lnlp_output[[1]]$model_output$obs
predicted <- block_lnlp_output[[1]]$model_output$pred
par(mar = c(4, 4, 1, 1), pty = "s")
plot_range <- range(c(observed, predicted), na.rm = TRUE)
plot(observed, predicted, xlim = plot_range, ylim = plot_range, xlab = "Observed",
ylab = "Predicted")
abline(a = 0, b = 1, lty = 2, col = "blue")
head(block_3sp)
data(sardine_anchovy_sst)
anchovy_xmap_sst <- ccm(sardine_anchovy_sst, E = 3, lib_column = "anchovy",
target_column = "np_sst", lib_sizes = seq(10, 80, by = 10), random_libs = FALSE)
sst_xmap_anchovy <- ccm(sardine_anchovy_sst, E = 3, lib_column = "np_sst", target_column = "anchovy",
lib_sizes = seq(10, 80, by = 10), random_libs = FALSE)
a_xmap_t_means <- ccm_means(anchovy_xmap_sst)
t_xmap_a_means <- ccm_means(sst_xmap_anchovy)
plot(a_xmap_t_means$lib_size, pmax(0, a_xmap_t_means$rho), type = "l", col = "red",
xlab = "Library Size", ylab = "Cross Map Skill (rho)", ylim = c(0, 0.4))
lines(t_xmap_a_means$lib_size, pmax(0, t_xmap_a_means$rho), col = "blue")
legend(x = "topleft", legend = c("anchovy xmap SST", "SST xmap anchovy"), col = c("red", "blue"),
lwd = 1, inset = 0.02, cex = 0.8)
anchovy_xmap_sst <- ccm(sardine_anchovy_sst, E = 3, lib_column = "anchovy",
target_column = "np_sst", lib_sizes = seq(10, 80, by = 10), random_libs = FALSE)
ln(1)
log(1)
log(0)
p <- seq(0, 1, 0.1)
p <- seq(0, 1, 0.05)
q <- 1 - p
plot(p / q)
plot(log(p / q))
plot(c(2,3,4) ~ c(4,7,9))
plot(c(1,2,3) ~ c(4,5,6))
plot(c(1,2,3)~c(4,5,6))
ln(1)
log(1)
exp(1)
ln(2)
log(@)
log(2)
exp(2)
exp(0)
install.packages("Deriv")
D(x^2)
D(x^2, x)
D(x^2, "x")
D(~ x^2, "x")
D(y ~ x^2, "x")
is.expression(x^2)
D(2*x, "x")
x <- seq(0,10,1)
D(2*x, "x")
x
D(x, "x")
deriv(2*y, "y", tag = ".expr")
D(2*x ~ x)
install.packages("mosaic")
library(mosaic)
D(2*x ~ x)
library(mosaic)
D(2*x ~ x)
g = D(2*x ~ x)
g = D(x^2 ~ x)
g = D(x^2 ~ x)
JM.num <- c(80, 10, 8, 2)
JM.lab <- c("Blake Bortles", "EDM", "Molotov Cocktails", "Other")
pie(x = JM.num, labels = JM.lab)
pie(x = JM.num, labels = JM.lab)
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 199), rgb(216, 163, 40), "black", "cyan2"))
pie(x = JM.num, labels = JM.lab, col = c("turquoise", "goldenrod", "black", "cyan2"))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 199), "goldenrod", "black", "cyan2"))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 199, max), "goldenrod", "black", "cyan2"))
plot(1:12 ~ 1:12)
plot(JM.num ~ seq(1,4,1), type = "o")
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19)
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2)
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2, col = rgb(19, 102, 199)
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2, col = rgb(19, 102, 199)
)
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2, col = rgb(19, 102, 199))
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2, col = rgb(red = 19, green = 102, blue = 199))
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2, col = rgb(19, 102, 199, maxColorValue = 255))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 199, maxColorValue = 255)),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 199, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza")
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza", radius = 1)
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza", radius = 1, cex.main = 1.25)
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza", radius = 1, cex.main = 1.75)
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza", radius = 1, cex.main = 1.5)
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza's Thoughts", radius = 1, cex.main = 1.5)
0.709+0.407+0.581
1.697/3
.801+.673+.755+.763+.502
3.494/5
0.6988/2
require(minpack.lm)
briere<-function(t, c, T0, Tm){
b=c()
for (i in 1:length(t)){
if (t[i]>T0 && t[i]<Tm)  {b[i]<-(c*t[i]*(t[i]-T0)*sqrt(Tm-t[i]))} else {b[i]<-(0)}
}
b
}
quad<-function(t, c, T0, Tm){
b=c()
for (i in 1:length(t)){
if (t[i]>T0 && t[i]<Tm)  {b[i]<-(-c*(t[i]-T0)*(t[i]-Tm))} else {b[i]<-(0)}
}
b
}
eppley<-function(t, a, b2){
b=c()
for (i in 1:length(t)){
b[i]<-a*exp(b2*t)
}
b
}
norberg<-function(t, z, w, e){
b=c()
for (i in 1:length(t)){
b[i]<- (1 - ((t - z)/w)^2)*e
}
b
}
temps <- seq(1,40,0.5)
plot(briere(temps, 0.001, 5, 33) ~ temps)
plot(briere(temps, 0.001, 5, 33) ~ temps, type = "l")
plot(briere(temps, 0.0001, 5, 33) ~ temps, type = "l")
plot(quad(temps, 0.001, 5, 33) ~ temps, type = "l")
plot(eppley(temps, 0.59, 0.0633) ~ temps, type = "l")
warnings()
temps
0.59 * exp(0.0633 * temps)
a <- eppley(temps, 0.59, 0.0633)
eppley<-function(t, a, b2){
b=c()
for (i in 1:length(t)){
b[i]<-a*exp(b2*t[i])
}
b
}
plot(eppley(temps, 0.59, 0.0633) ~ temps, type = "l")
norberg<-function(t, z, w, a, b2){
b=c()
for (i in 1:length(t)){
b[i]<- (1 - ((t[i] - z)/w)^2)*a*exp(b2*t[i])
}
b
}
exp(007)
exp(.07)
1/exp(.07)
plot(eppley(temps, 0.59, 0.0633) ~ temps, type = "l")
plot(eppley(temps, 0.932, 0.0275) ~ temps, type = "l")
plot(eppley(temps, 0.932, 0.05) ~ temps, type = "l")
plot(norberg(temps, 25, 10, 0.59, 0.0633) ~ temps, type = "l")
lines(norberg(temps, 25, 15, 0.59, 0.0633) ~ temps, col = "red")
plot(norberg(temps, 25, 10, 0.59, 0.0633) ~ temps, type = "l", ylim = c(0,3), xlim = c(0,40))
plot(norberg(temps, 25, 10, 0.59, 0.0633) ~ temps, type = "l", ylim = c(0,5), xlim = c(0,40))
lines(norberg(temps, 25, 15, 0.59, 0.0633) ~ temps, col = "red")
lines(norberg(temps, 20, 10, 0.59, 0.0633) ~ temps, col = "black", lty = 2)
lines(norberg(temps, 20, 15, 0.59, 0.0633) ~ temps, col = "red", lty = 2)
# Temperature levels
Temp.xs <- seq(1, 45, 0.1)
### Temperature gradient
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/For Erin Synthesis Paper/Temp Trajectories")
write.table(Temp.xs, "CxquWNVx.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "CxtaWNVx.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "CxunWNVx.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "CxtaWEEV.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "CxtaSLEV.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "AetaRVFV.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "AetrEEEV.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "CxpiSINV.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "AetaSINV.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
# Temperature levels
Temp.xs <- seq(5, 45, 0.2)
write.table(Temp.xs, "CxanMVEV.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "AecaRRVx.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "AenoRRVx.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
# Temperature levels
Temp.xs <- seq(1, 45, 0.1)
write.table(Temp.xs, "AeveRVFV.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(Temp.xs, "CxthRVFV.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
