sd(Cann.Mildura.MVE.27.trans)
Cann.Brisbane.MVE.20.trans <- c(70, 77, 75, 90)
Cann.Mildura.MVE.20.trans <- c(92, 87, 93, 93)
mean(Cann.Brisbane.MVE.20.trans)
mean(Cann.Mildura.MVE.20.trans)
Cann.Brisbane.MVE.27.trans <- c(75, 84, 100)
Cann.Mildura.MVE.27.trans <- c(50, 52, 83, 87, 100)
mean(Cann.Brisbane.MVE.27.trans)
mean(Cann.Mildura.MVE.27.trans)
mean(20, 27, 27, 8, 5)
mean(10, 22, 12, 20, 10)
mean(10, 22, 12, 20, 10)
mean(12, 53, 14, 29)
means(20, 31, 8, 20)
mean(20, 31, 8, 20)
mean(20, 27, 27, 8, 5)
mean(10, 22, 12, 20, 10)
mean(12, 53, 14, 29)
mean(20, 31, 8, 20)
mean(20, 27, 27, 8, 5)
sum(10, 22, 12, 20, 10)
sum(12, 53, 14, 29)
sum(20, 31, 8, 20)
sum(20, 27, 27, 8, 5)
74/5
n.20.b <- c(10, 22, 12, 20, 10)
n.20.b <- c(10, 22, 12, 20, 10)
n.20.m <- c(12, 53, 14, 29)
n.27.b <- c(20, 31, 8, 20)
n.27.m <- c(20, 27, 27, 8, 5)
mean(n.20.b)
mean(n.20.m)
mean(n.27.b)
mean(n.27.m)
mean(c(32,35))
Cann.Brisbane.MVE.34.trans <- c(78, 100, 90)
mean(Cann.Brisbane.MVE.34.trans)
sd(Cann.Brisbane.MVE.20.trans)
sd(Cann.Mildura.MVE.20.trans)
sd(Cann.Brisbane.MVE.27.trans)
sd(Cann.Mildura.MVE.27.trans)
mean(Cann.Brisbane.MVE.34.trans)
sd(Cann.Brisbane.MVE.34.trans)
n.34.b <- c(9, 23, 20)
mean(n.34.b)
install.packages("rEDM")
install.packages("dplyr")
library("rEDM")
library("dplyr")
data(tentmap_del)
head(tentmap_del)
lib <- c(1, 100)
pred <- c(201, 500)
ts <- tentmap_del
simplex_output <- simplex(ts, lib, pred)
summary(simplex_output)
par(mar = c(4, 4, 1, 1), mgp = c(2.5, 1, 0))
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(ts, lib, pred, E = 2, tp = 1:10)
plot(simplex_output$tp, simplex_output$rho, type = "l", xlab = "Time to Prediction (tp)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(ts, lib, pred)
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(ts, lib, pred, E = 2, tp = 1:10)
plot(simplex_output$tp, simplex_output$rho, type = "l", xlab = "Time to Prediction (tp)",
ylab = "Forecast Skill (rho)")
smap_output <- s_map(ts, lib, pred, E = 2)
plot(smap_output$theta, smap_output$rho, type = "l", xlab = "Nonlinearity (theta)",
ylab = "Forecast Skill (rho)")
smap_output$theta
data(block_3sp)
head(block_3sp)
plot(simplex_output$E, simplex_output$rho, type = "l", xlab = "Embedding Dimension (E)",
ylab = "Forecast Skill (rho)")
simplex_output <- simplex(ts, lib, pred)
block_lnlp_output <- block_lnlp(block_3sp, lib = lib, pred = pred, columns = c(1, 2, 4), target_column = 1,
stats_only = FALSE, first_column_time = TRUE)
data(block_3sp)
head(block_3sp)
lib <- c(1, NROW(block_3sp))
pred <- c(1, NROW(block_3sp))
block_lnlp_output <- block_lnlp(block_3sp, lib = lib, pred = pred, columns = c(1, 2, 4), target_column = 1,
stats_only = FALSE, first_column_time = TRUE)
observed <- block_lnlp_output[[1]]$model_output$obs
predicted <- block_lnlp_output[[1]]$model_output$pred
par(mar = c(4, 4, 1, 1), pty = "s")
plot_range <- range(c(observed, predicted), na.rm = TRUE)
plot(observed, predicted, xlim = plot_range, ylim = plot_range, xlab = "Observed",
ylab = "Predicted")
abline(a = 0, b = 1, lty = 2, col = "blue")
head(block_3sp)
data(sardine_anchovy_sst)
anchovy_xmap_sst <- ccm(sardine_anchovy_sst, E = 3, lib_column = "anchovy",
target_column = "np_sst", lib_sizes = seq(10, 80, by = 10), random_libs = FALSE)
sst_xmap_anchovy <- ccm(sardine_anchovy_sst, E = 3, lib_column = "np_sst", target_column = "anchovy",
lib_sizes = seq(10, 80, by = 10), random_libs = FALSE)
a_xmap_t_means <- ccm_means(anchovy_xmap_sst)
t_xmap_a_means <- ccm_means(sst_xmap_anchovy)
plot(a_xmap_t_means$lib_size, pmax(0, a_xmap_t_means$rho), type = "l", col = "red",
xlab = "Library Size", ylab = "Cross Map Skill (rho)", ylim = c(0, 0.4))
lines(t_xmap_a_means$lib_size, pmax(0, t_xmap_a_means$rho), col = "blue")
legend(x = "topleft", legend = c("anchovy xmap SST", "SST xmap anchovy"), col = c("red", "blue"),
lwd = 1, inset = 0.02, cex = 0.8)
anchovy_xmap_sst <- ccm(sardine_anchovy_sst, E = 3, lib_column = "anchovy",
target_column = "np_sst", lib_sizes = seq(10, 80, by = 10), random_libs = FALSE)
ln(1)
log(1)
log(0)
p <- seq(0, 1, 0.1)
p <- seq(0, 1, 0.05)
q <- 1 - p
plot(p / q)
plot(log(p / q))
plot(c(2,3,4) ~ c(4,7,9))
plot(c(1,2,3) ~ c(4,5,6))
plot(c(1,2,3)~c(4,5,6))
ln(1)
log(1)
exp(1)
ln(2)
log(@)
log(2)
exp(2)
exp(0)
install.packages("Deriv")
D(x^2)
D(x^2, x)
D(x^2, "x")
D(~ x^2, "x")
D(y ~ x^2, "x")
is.expression(x^2)
D(2*x, "x")
x <- seq(0,10,1)
D(2*x, "x")
x
D(x, "x")
deriv(2*y, "y", tag = ".expr")
D(2*x ~ x)
install.packages("mosaic")
library(mosaic)
D(2*x ~ x)
library(mosaic)
D(2*x ~ x)
g = D(2*x ~ x)
g = D(x^2 ~ x)
g = D(x^2 ~ x)
JM.num <- c(80, 10, 8, 2)
JM.lab <- c("Blake Bortles", "EDM", "Molotov Cocktails", "Other")
pie(x = JM.num, labels = JM.lab)
pie(x = JM.num, labels = JM.lab)
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 199), rgb(216, 163, 40), "black", "cyan2"))
pie(x = JM.num, labels = JM.lab, col = c("turquoise", "goldenrod", "black", "cyan2"))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 199), "goldenrod", "black", "cyan2"))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 199, max), "goldenrod", "black", "cyan2"))
plot(1:12 ~ 1:12)
plot(JM.num ~ seq(1,4,1), type = "o")
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19)
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2)
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2, col = rgb(19, 102, 199)
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2, col = rgb(19, 102, 199)
)
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2, col = rgb(19, 102, 199))
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2, col = rgb(red = 19, green = 102, blue = 199))
plot(JM.num ~ seq(1,4,1), type = "o", pch = 19, lwd = 2, col = rgb(19, 102, 199, maxColorValue = 255))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 199, maxColorValue = 255)),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 199, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)))
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza")
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza", radius = 1)
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza", radius = 1, cex.main = 1.25)
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza", radius = 1, cex.main = 1.75)
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza", radius = 1, cex.main = 1.5)
pie(x = JM.num, labels = JM.lab, col = c(rgb(19, 102, 119, maxColorValue = 255),
rgb(216, 163, 40, maxColorValue = 255), rgb(31, 171, 198, maxColorValue = 255),
rgb(0, 0, 0)), main = "Jason Mendoza's Thoughts", radius = 1, cex.main = 1.5)
0.709+0.407+0.581
1.697/3
.801+.673+.755+.763+.502
3.494/5
0.6988/2
# Set working directory
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/RRV/Fitting Traits")
##### Load JAGS output - fits from uniform priors
load("jagsout_pRH_Cann.Rdata")
load("jagsout_nLR_Cann.Rdata")
load("jagsout_bc_RRV_Ovig.Rdata")
load("jagsout_PDR_RRV_Ovig.Rdata")
##### Load JAGS output - data-informed fits
load("jagsout_GCD_Cann_inf.Rdata")
load("jagsout_EFD_Cann_inf.Rdata")
load("jagsout_pLA_Cann_inf.Rdata")
load("jagsout_MDR_Cann_inf.Rdata")
load("jagsout_ls_Cann_inf.Rdata")
load("jagsout_PDR_RRV_inf.Rdata")
GCD.preds.inf <- GCD.Cann.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
EFD.preds.inf <- EFD.Cann.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
pRH.preds <- pRH.Cann.out$BUGSoutput$sims.list$z.trait.mu.pred # no data-informed fit
nLR.preds <- nLR.Cann.out$BUGSoutput$sims.list$z.trait.mu.pred # no data-informed fit
pLA.preds.inf <- pLA.Cann.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
MDR.preds.inf <- MDR.Cann.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
ls.preds.inf <- ls.Cann.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
bc.RRV.preds <- bc.RRV.out$BUGSoutput$sims.list$z.trait.mu.pred # no data-informed fit
PDR.RRV.preds.inf <- PDR.RRV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
Temp.xs <- seq(5, 45, 0.2)
N.Temp.xs <-length(Temp.xs)
# Creating a small constant to keep denominators from being zero
ec<-0.000001
# Define pEA
# **NOTE: nLR fit is transformed by * 1000 (as fit) and /298.63 (to make it a % survival) **
pEA.fx = function(pLA, pRH, nLR) {pLA * pRH * (nLR * 1000 / 298.63)}
# Define R0 with full temperature dependence
R0.full = function(a, bc, ls, PDR, EFD, pEA, MDR){
(a^2 * bc * exp(-(1/(ls+ec))*(1/(PDR+ec))) * EFD * pEA * MDR * ls^3)^0.5
}
############# Calculate quantities
pEA.inf.calc <- pEA.fx(pLA.preds.inf, pRH.preds, nLR.preds)
R0.full.inf.calc <- R0.full(GCD.preds.inf, bc.RRV.preds, ls.preds.inf, PDR.RRV.preds.inf, EFD.preds.inf, pEA.inf.calc, MDR.preds.inf)
### Predicted values over temperature gradient - traits
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/For Erin Synthesis Paper/Trait Trajectories")
a <- read.csv("CxanRRVx.a.csv")
str(a)
dim(a)
a2 <- read.csv("AngaPfal.a.csv")
dim(a2)
write.csv(t(GCD.preds.inf), "CxanRRVx.a.csv")
write.csv(t(EFD.preds.inf), "CxanRRVx.EFD.csv")
write.csv(t(pRH.preds), "CxanRRVx.pRH.csv")
write.csv(t(nLR.preds), "CxanRRVx.nLR.csv")
write.csv(t(pLA.preds.inf), "CxanRRVx.pLA.csv")
write.csv(t(MDR.preds.inf), "CxanRRVx.MDR.csv")
write.csv(t(ls.preds.inf), "CxanRRVx.lf.csv")
write.csv(t(bc.RRV.preds), "CxanRRVx.bc.csv")
write.csv(t(PDR.RRV.preds.inf), "CxanRRVx.PDR.csv")
##### Load JAGS output - fits from alternate vector and virus species
load("jagsout_PDR_MVE_Cann_inf.Rdata")
load("jagsout_MDR_Ocam_inf.Rdata")
# Set working directory
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/RRV/Fitting Traits")
##### Load JAGS output - fits from alternate vector and virus species
load("jagsout_PDR_MVE_Cann_inf.Rdata")
load("jagsout_MDR_Ocam_inf.Rdata")
load("jagsout_pLA_Ocam_inf.Rdata")
load("jagsout_MDR_Anot_inf.Rdata")
load("jagsout_pLA_Anot_inf.Rdata")
#####  Pull out the derived/predicted values for others models:
PDR.MVE.preds.inf <- PDR.MVE.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
pLA.Anot.preds.inf <- pLA.Anot.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
pLA.Ocam.preds.inf <- pLA.Ocam.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
MDR.Anot.preds.inf <- MDR.Anot.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
MDR.Ocam.preds.inf <- MDR.Ocam.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
# R0 for MVE (no bc thermal response), inf only
R0.MVE.full.inf.calc <- R0.full(GCD.preds.inf, 1, ls.preds.inf, PDR.MVE.preds.inf, EFD.preds.inf, pEA.inf.calc, MDR.preds.inf)
write.csv(t(MDR.Anot.preds.inf), "AenoRRVx.MDR.csv")
write.csv(t(pLA.Anot.preds.inf), "AenoRRVx.pLA.csv")
write.csv(t(MDR.Ocam.preds.inf), "AecaRRVx.MDR.csv")
write.csv(t(pLA.Ocam.preds.inf), "AecaRRVx.pLA.csv")
write.csv(t(PDR.MVE.preds.inf), "CxanMVEV.PDR.csv")
dim(a)
dim(a2)
a <- read.csv("CxanRRVx.a.csv")
### Predicted values over temperature gradient - traits
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/For Erin Synthesis Paper/Trait Trajectories")
write.csv(t(MDR.Anot.preds.inf), "AenoRRVx.MDR.csv")
write.csv(t(pLA.Anot.preds.inf), "AenoRRVx.pLA.csv")
write.csv(t(MDR.Ocam.preds.inf), "AecaRRVx.MDR.csv")
write.csv(t(pLA.Ocam.preds.inf), "AecaRRVx.pLA.csv")
write.csv(t(PDR.MVE.preds.inf), "CxanMVEV.PDR.csv")
a <- read.csv("CxanRRVx.a.csv")
dim(a)
write.table(t(GCD.preds.inf), "CxanRRVx.a.csv", row.names = FALSE, col.names = FALSE, sep = ',')
a <- read.csv("CxanRRVx.a.csv")
dim(a)
dim(a2)
write.table(t(EFD.preds.inf), "CxanRRVx.EFD.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pRH.preds), "CxanRRVx.pRH.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(nLR.preds), "CxanRRVx.nLR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pLA.preds.inf), "CxanRRVx.pLA.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(MDR.preds.inf), "CxanRRVx.MDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(ls.preds.inf), "CxanRRVx.lf.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(bc.RRV.preds), "CxanRRVx.bc.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(PDR.RRV.preds.inf), "CxanRRVx.PDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(MDR.Anot.preds.inf), "AenoRRVx.MDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pLA.Anot.preds.inf), "AenoRRVx.pLA.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(MDR.Ocam.preds.inf), "AecaRRVx.MDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pLA.Ocam.preds.inf), "AecaRRVx.pLA.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(PDR.MVE.preds.inf), "CxanMVEV.PDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
### Predicted values over temperature gradient - R0
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/For Erin Synthesis Paper/R0 Trajectories")
write.table(t(R0.full.inf.calc), "CxanRRVx.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(R0.MVE.full.inf.calc), "CxanMVEx.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
### Temperature gradient
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/For Erin Synthesis Paper/Temp Trajectories")
write.table(Temp.xs, "CxanRRVx.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
# Set working directory
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/6 Viruses/Fitting Traits")
load("jagsout_a_Cpip_inf.Rdata")
load("jagsout_a_Cqui_inf.Rdata")
load("jagsout_a_Ctar_inf.Rdata")
load("jagsout_bc_CpipWNV_inf.Rdata")
load("jagsout_c_CpipWNV_inf.Rdata")
load("jagsout_b_CtarWNV_inf.Rdata")
load("jagsout_bc_CuniWNV_inf.Rdata")
load("jagsout_bc_CtarWEEV_inf.Rdata")
load("jagsout_c_CtarWEEV_inf.Rdata")
load("jagsout_b_CtarWEEV_inf.Rdata")
load("jagsout_c_CtarSLEV_inf.Rdata")
load("jagsout_b_CtarSLEV_inf.Rdata")
load("jagsout_bc_AtriEEEV_inf.Rdata")
load("jagsout_bc_AtaeRVFV_inf.Rdata")
load("jagsout_c_CpipSINV_inf.Rdata")
load("jagsout_c_AtaeSINV_inf.Rdata")
load("jagsout_lf_Cpip_inf.Rdata")
load("jagsout_lf_Cqui_inf.Rdata")
load("jagsout_lf_Ctar_inf.Rdata")
load("jagsout_lf_Atae_inf.Rdata")
load("jagsout_MDR_Cpip_inf.Rdata")
load("jagsout_MDR_Cqui_inf.Rdata")
load("jagsout_MDR_Ctar_inf.Rdata")
load("jagsout_MDR_Atri_inf.Rdata")
load("jagsout_MDR_Avex_inf.Rdata")
load("jagsout_pLA_Cpip_inf.Rdata")
load("jagsout_pLA_Cqui_inf.Rdata")
load("jagsout_pLA_Ctar_inf.Rdata")
load("jagsout_pLA_Atri_inf.Rdata")
load("jagsout_pLA_Avex_inf.Rdata")
load("jagsout_PDR_CpipWNV_inf.Rdata")
load("jagsout_PDR_CquiWNV_inf.Rdata")
load("jagsout_PDR_CtarWNV_inf.Rdata")
load("jagsout_PDR_CuniWNV_inf.Rdata")
load("jagsout_PDR_CtarWEEV_inf.Rdata")
load("jagsout_PDR_CtarSLEV_inf.Rdata")
# load("jagsout_PDR_AtaeSINV_inf.Rdata") - decided to not use fit because little temperature dependence
load("jagsout_PDR_AtriEEEV_inf.Rdata")
load("jagsout_PDR_AtaeRVFV_inf.Rdata")
load("jagsout_EFOC_Cpip_inf.Rdata")
load("jagsout_EPR_Cqui_inf.Rdata")
load("jagsout_pO_Cpip_inf.Rdata")
load("jagsout_pO_Cqui_inf.Rdata")
load("jagsout_EV_Cpip_inf.Rdata")
load("jagsout_EV_Cqui_inf.Rdata")
load("jagsout_EV_Cthe_inf.Rdata")
load("jagsout_EV_Avex_inf.Rdata")
a.Cpip.preds <- a.Cpip.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
a.Cqui.preds <- a.Cqui.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
a.Ctar.preds <- a.Ctar.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
bc.CpipWNV.preds <- bc.CpipWNV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
c.CpipWNV.preds <- c.CpipWNV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
b.CtarWNV.preds <- b.CtarWNV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
bc.CuniWNV.preds <- bc.CuniWNV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
bc.CtarWEEV.preds <- bc.CtarWEEV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
c.CtarWEEV.preds <- c.CtarWEEV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
b.CtarWEEV.preds <- b.CtarWEEV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
c.CtarSLEV.preds <- c.CtarSLEV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
b.CtarSLEV.preds <- b.CtarSLEV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
c.AtaeSINV.preds <- c.AtaeSINV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
c.CpipSINV.preds <- c.CpipSINV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
bc.AtaeRVFV.preds <- bc.AtaeRVFV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
bc.AtriEEEV.preds <- bc.AtriEEEV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
EFOC.Cpip.preds <- EFOC.Cpip.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
EPR.Cqui.preds <- EPR.Cqui.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
pO.Cpip.preds <- pO.Cpip.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
pO.Cqui.preds <- pO.Cqui.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
MDR.Cpip.preds <- MDR.Cpip.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
MDR.Cqui.preds <- MDR.Cqui.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
MDR.Ctar.preds <- MDR.Ctar.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
MDR.Atri.preds <- MDR.Atri.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
MDR.Avex.preds <- MDR.Avex.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
PDR.CpipWNV.preds <- PDR.CpipWNV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
PDR.CquiWNV.preds <- PDR.CquiWNV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
PDR.CtarWNV.preds <- PDR.CtarWNV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
PDR.CuniWNV.preds <- PDR.CuniWNV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
PDR.CtarWEEV.preds <- PDR.CtarWEEV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
PDR.CtarSLEV.preds <- PDR.CtarSLEV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
PDR.AtriEEEV.preds <- PDR.AtriEEEV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
PDR.AtaeRVFV.preds <- PDR.AtaeRVFV.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
EV.Cpip.preds <- EV.Cpip.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
EV.Cqui.preds <- EV.Cqui.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
EV.Cthe.preds <- EV.Cthe.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
EV.Avex.preds <- EV.Avex.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
pLA.Cpip.preds <- pLA.Cpip.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
pLA.Cqui.preds <- pLA.Cqui.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
pLA.Ctar.preds <- pLA.Ctar.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
pLA.Atri.preds <- pLA.Atri.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
pLA.Avex.preds <- pLA.Avex.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
lf.Cpip.preds <- lf.Cpip.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
lf.Cqui.preds <- lf.Cqui.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
lf.Ctar.preds <- lf.Ctar.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
lf.Atae.preds <- lf.Atae.out.inf$BUGSoutput$sims.list$z.trait.mu.pred
for(i in 1:140){
lf.Cpip.preds[,i] <- lf.Cpip.preds[,141]
}
for(i in 1:150){
lf.Cqui.preds[,i] <- lf.Cqui.preds[,151]
}
for(i in 1:130){
lf.Ctar.preds[,i] <- lf.Ctar.preds[,131]
}
for(i in 1:210){
lf.Atae.preds[,i] <- lf.Atae.preds[,211]
}
Temp.xs <- seq(1, 45, 0.1)
N.Temp.xs <-length(Temp.xs)
# Creating a small constant to keep denominators from being zero
ec<-0.000001
# Define R0 with bc as one value
R0.bc = function(a, bc, lf, PDR, pO, EPR, EV, pLA, MDR){
(a^3 * bc * exp(-(1/(lf+ec))*(1/(PDR+ec))) * pO * EPR * EV * pLA * MDR * lf^3)^0.5
}
# Define R0 with b & c as two values
R0.b.c = function(a, b, c, lf, PDR, pO, EPR, EV, pLA, MDR){
(a^3 * b * c * exp(-(1/(lf+ec))*(1/(PDR+ec))) * pO * EPR * EV * pLA * MDR * lf^3)^0.5
}
R0.CpipWNV.calc <- R0.bc(a.Cpip.preds, bc.CpipWNV.preds, lf.Cpip.preds, PDR.CpipWNV.preds, 1, EFOC.Cpip.preds, EV.Cpip.preds, pLA.Cpip.preds, MDR.Cpip.preds)
# WNV in Ctar - Cqui EFD
R0.CtarWNV.calc <- R0.bc(a.Ctar.preds, b.CtarWNV.preds, lf.Ctar.preds, PDR.CtarWNV.preds, 1, EFOC.Cpip.preds, EV.Cpip.preds, pLA.Ctar.preds, MDR.Ctar.preds)
# WNV in Cqui - complete mosquito traits, bc from Ctar
R0.CquiWNV.calc <- R0.bc(a.Cqui.preds, bc.CuniWNV.preds, lf.Cqui.preds, PDR.CquiWNV.preds, pO.Cqui.preds, EPR.Cqui.preds, EV.Cqui.preds, pLA.Cqui.preds, MDR.Cqui.preds)
# WNV in Cuni (bc/PDR only) - Mostly Cpip mosquito traits but Cqui EFD
R0.CuniWNV.calc <- R0.bc(a.Cpip.preds, bc.CuniWNV.preds, lf.Cpip.preds, PDR.CuniWNV.preds, 1, EFOC.Cpip.preds, EV.Cpip.preds, pLA.Cpip.preds, MDR.Cpip.preds)
# WEEV in Ctar - Cqui EFD, bc (Alt with b*c)
R0.CtarWEEV.calc <- R0.b.c(a.Ctar.preds, b.CtarWEEV.preds, c.CtarWEEV.preds, lf.Ctar.preds, PDR.CtarWEEV.preds, 1, EFOC.Cpip.preds, EV.Cpip.preds, pLA.Ctar.preds, MDR.Ctar.preds)
R0.CtarSLEV.calc <- R0.b.c(a.Ctar.preds, b.CtarSLEV.preds, c.CtarSLEV.preds, lf.Ctar.preds, PDR.CtarSLEV.preds, 1, EFOC.Cpip.preds, EV.Cpip.preds, pLA.Ctar.preds, MDR.Ctar.preds)
# RVFV in Atae (inf traits) / Cpip/Avex (mozzie traits)
R0.AtaeRVFV.calc <- R0.bc(a.Cpip.preds, bc.AtaeRVFV.preds, lf.Atae.preds, PDR.AtaeRVFV.preds, 1, EFOC.Cpip.preds, EV.Cthe.preds, pLA.Avex.preds, MDR.Avex.preds)
# EEEV in Atri (Cpip for missing mozzie traits)
R0.AtriEEEV.calc <- R0.bc(a.Cpip.preds, bc.AtriEEEV.preds, lf.Cpip.preds, PDR.AtriEEEV.preds, 1, EFOC.Cpip.preds, EV.Cpip.preds, pLA.Atri.preds, MDR.Atri.preds)
# SINV in Cpip (all traits), missing b and PDR
R0.CpipSINV.calc <- R0.bc(a.Cpip.preds, c.CpipSINV.preds, lf.Cpip.preds, 1, 1, EFOC.Cpip.preds, EV.Cpip.preds, pLA.Cpip.preds, MDR.Cpip.preds)
# SINV in Atae (Avex/Cpip mozzie traits), missing b and PDR
R0.AtaeSINV.calc <- R0.bc(a.Cpip.preds, c.AtaeSINV.preds, lf.Atae.preds, 1, 1, EFOC.Cpip.preds, EV.Avex.preds, pLA.Avex.preds, MDR.Avex.preds)
### Predicted values over temperature gradient - traits
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/For Erin Synthesis Paper/Trait Trajectories")
nrow(t(a.Cpip.preds))
write.table(t(a.Cpip.preds), "CxpiWNVx.a.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(a.Cqui.preds), "CxquWNVx.a.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(a.Ctar.preds), "CxtaWNVx.a.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(bc.CpipWNV.preds), "CxpiWNVx.bc.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(c.CpipWNV.preds), "CxpiWNVx.c.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(b.CtarWNV.preds), "CxtaWNVx.b.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(bc.CuniWNV.preds), "CxunWNVx.bc.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(bc.CtarWEEV.preds), "CxtaWEEV.bc.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(c.CtarWEEV.preds), "CxtaWEEVx.c.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(b.CtarWEEV.preds), "CxtaWEEVx.b.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(c.CtarSLEV.preds), "CxtaSLEVx.c.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(b.CtarSLEV.preds), "CxtaSLEVx.b.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(c.CpipSINV.preds), "CxpiSINV.c.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(c.AtaeSINV.preds), "AetaSINV.c.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(bc.AtaeRVFV.preds), "AetaRVFV.bc.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(bc.AtriEEEV.preds), "AetrEEEV.bc.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(EFOC.Cpip.preds), "CxpiWNVx.EFOC.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(EPR.Cqui.preds), "CxquWNVx.EPR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pO.Cpip.preds), "CxpiWNVx.pO.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pO.Cqui.preds), "CxquWNVx.pO.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(MDR.Cpip.preds), "CxpiWNVx.MDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(MDR.Cqui.preds), "CxquWNVx.MDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(MDR.Ctar.preds), "CxtaWNVx.MDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(MDR.Atri.preds), "AetrEEEV.MDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(MDR.Avex.preds), "AeveRVFV.MDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pLA.Cpip.preds), "CxpiWNVx.pLA.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pLA.Cqui.preds), "CxquWNVx.pLA.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pLA.Ctar.preds), "CxtaWNVx.pLA.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pLA.Atri.preds), "AetrEEEV.pLA.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(pLA.Avex.preds), "AeveRVFV.pLA.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(EV.Cpip.preds), "CxpiWNVx.EV.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(EV.Cqui.preds), "CxquWNVx.EV.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(EV.Cthe.preds), "CxthRVFV.EV.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(EV.Avex.preds), "AeveRVFV.EV.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(lf.Cpip.preds), "CxpiWNVx.lf.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(lf.Cqui.preds), "CxquWNVx.lf.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(lf.Ctar.preds), "CxtaWNVx.lf.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(lf.Atae.preds), "AetaRVFV.lf.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(PDR.CpipWNV.preds), "CxpiWNVx.PDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(PDR.CquiWNV.preds), "CxquWNVx.PDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(PDR.CtarWNV.preds), "CxtaWNVx.PDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(PDR.CuniWNV.preds), "CxunWNVx.PDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(PDR.CtarWEEV.preds), "CxtaWEEV.PDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(PDR.CtarSLEV.preds), "CxtaSLEV.PDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(PDR.AtriEEEV.preds), "AetrEEEV.PDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(PDR.AtaeRVFV.preds), "AetaRVFV.PDR.csv", row.names = FALSE, col.names = FALSE, sep = ',')
### Temperature gradient
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/For Erin Synthesis Paper/Temp Trajectories")
write.table(Temp.xs, "CxpiWNVx.T.csv", row.names = FALSE, col.names = FALSE, sep = ',')
### Predicted values over temperature gradient - R0
setwd("~/Dropbox/Research Mordecai Lab/VBD Temp Project/For Erin Synthesis Paper/R0 Trajectories")
write.table(t(R0.CpipWNV.calc), "CxpiWNVx.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(R0.CquiWNV.calc), "CxquWNVx.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(R0.CtarWNV.calc), "CxtaWNVx.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(R0.CuniWNV.calc), "CxunWNVx.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(R0.CtarWEEV.calc), "CxtaWEEV.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(R0.CtarSLEV.calc), "CxtaSLEV.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(R0.AtaeRVFV.calc), "AetaRVFV.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(R0.AtriEEEV.calc), "AetrEEEV.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(R0.CpipSINV.calc), "CxpiSINV.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
write.table(t(R0.AtaeSINV.calc), "AetaSINV.R0.csv", row.names = FALSE, col.names = FALSE, sep = ',')
